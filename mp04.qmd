---
title: "Mini Project 4"
output: 
  html_document:
    css: styles.css
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r setup, include=FALSE}
library(sf)        # For handling spatial data (shapefiles)
library(httr2)     # For more robust HTTP requests
library(rvest)     # For web scraping, especially to extract tables from HTML
library(dplyr)     # For data manipulation
library(janitor)   # For cleaning column names and data wrangling
library(stringr)   # For string manipulation
library(ggplot2)   # For creating static visualizations
library(purrr)     # For functional programming (e.g., map functions)
library(knitr)     # For rendering output (tables, etc.) in R Markdown
```

## Introduction
Welcome to a deep dive into the **2020 and 2024 US Presidential Election results**! This analysis explores how each state has shifted between the two elections, county by county. From red to blue, and everything in between, let's uncover the stories behind the numbers and see how America voted!

## ðŸ§© US County Shapes

I focused on acquiring data for the ***2020 U.S. Presidential Election*** by scraping county-level election results from Wikipedia. Using the rvest and httr2 libraries in R, I collected the relevant election data for each state. The data was cleaned by removing unnecessary columns, converting character values to numeric, and renaming ambiguous columns. This ensured that the dataset contained only relevant columns, such as the total votes for Joe Biden and Donald Trump, while also addressing inconsistencies in the column names. The cleaned dataset laid the foundation for the state-level analysis conducted in the subsequent tasks.

```{r}
#| label: County Shape
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

# Directory setup for shapefiles
shapefile_dir <- "data/mp04/county_shapes"
zip_path <- "data/mp04/county_shapefiles.zip"
url <- "https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_county_500k.zip"

# Download and unzip if necessary
if (!file.exists(zip_path)) {
  download.file(url, destfile = zip_path, mode = "wb")
}
if (!dir.exists(shapefile_dir)) {
  unzip(zip_path, exdir = shapefile_dir)
}

# Load and clean county shapes
county_shapes <- st_read(shapefile_dir) %>%
  select(STATEFP, COUNTYFP, NAME, geometry) %>%
  head(6)

kable(county_shapes)
```

## ðŸ§© 2024 US Presidential Election Results

Using the cleaning function developed earlier, I extracted and processed county-level election results for each state. This involved ensuring that the necessary vote columns were available and that the data was correctly formatted for analysis. After cleaning the data, I combined the results into a single dataset, making it easier to compute state-level summaries. This step was essential for preparing the dataset for deeper analysis, including vote totals and candidate comparisons across different states.

```{r}
#| label: 2024 Election
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

scrape_state_results_2024 <- function(state_name) {
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2024_United_States_presidential_election_in_", safe_state)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2024.html"))
  
  # Download and save HTML if not already present
  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }
  
  # Read HTML and extract tables
  page <- read_html(html_path)
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)
  
  # Identify the table with county results
  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }
  
  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }
  
  # Clean and return county table
  county_table <- county_table |>
    janitor::clean_names() |>   # Standardize column names
    mutate(state = state_name)
  
  return(county_table)
}

# Example usage: Scrape and view results for New York
ny_results <- scrape_state_results_2024("New York")
head(ny_results)
```

## âœ… 2020 US Presidential Election Results

The function extracts relevant vote counts for Joe Biden and Donald Trump, along with total votes, and standardizes column names across varying table formats. After combining the cleaned datasets, I computed state-level summaries, including total votes for each candidate and their respective vote shares. The summary table and accompanying bar chart reveal differences in voter turnout and candidate support across states, with ***California*** and ***Florida*** contributing the highest total vote counts in the sample.

```{r}
#| label: 2020 Election
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

scrape_clean_state_results_2020 <- function(state_name, show_table = FALSE) {
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_", safe_state)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2020.html"))
  
  # Download and save HTML if not already present
  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }

  # Read HTML and extract tables
  page <- read_html(html_path)
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)

  # Identify the county-level table
  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }

  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }

  county_table <- county_table |> clean_names() |> 
    mutate(state = state_name)
  
  # Check for expected vote columns and clean
  if (!any(str_detect(names(county_table), "biden")) | !any(str_detect(names(county_table), "trump"))) {
    warning(paste("Expected vote columns not found in", state_name))
    return(NULL)
  }

  cleaned <- county_table |> 
    select(matches("county|trump|biden|total|votes")) |> 
    mutate(state = state_name) |> 
    mutate(across(where(is.character), ~ gsub(",", "", .))) |> 
    mutate(across(matches("trump|biden|total|votes"), ~ suppressWarnings(as.numeric(.))))

  if (!"total_votes" %in% names(cleaned)) {
    tv_col <- names(cleaned)[str_detect(names(cleaned), "total|votes")][1]
    cleaned <- cleaned |> rename(total_votes = all_of(tv_col))
  }

  if (show_table) {
    return(kable(head(cleaned, 10), caption = paste("2020 Results for", state_name)))
  } else {
    return(cleaned)
  }
}

# Scrape and clean data for all states
states <- state.name  # List of U.S. states
results_2020 <- map(states, ~ scrape_clean_state_results_2020(.x))
results_2020_df <- bind_rows(results_2020[!sapply(results_2020, is.null)])

# Summarize state-level results
state_summary_2020 <- results_2020_df |>
  group_by(state) |>
  summarise(
    total_biden = sum(joe_biden_democratic, na.rm = TRUE),
    total_trump = sum(donald_trump_republican, na.rm = TRUE),
    total_votes = sum(total_votes, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    biden_pct = round(100 * total_biden / total_votes, 1),
    trump_pct = round(100 * total_trump / total_votes, 1)
  ) |>
  arrange(desc(total_votes))

# Preview the top 10 states by total votes
kable(
  head(state_summary_2020, 10),
  caption = "Top States by Total Votes in the 2020 Presidential Election"
)
```

## Combining Datasets

```{r}
#| label: Combining Datasets
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code
#| include: false

# Scrape all 2024 results
results_2024 <- map(state.name, ~ scrape_state_results_2024(.x))
results_2024_df <- bind_rows(results_2024[!sapply(results_2024, is.null)])

# Prep both datasets for joining
prep_df <- function(df, year) {
  df %>%
    rename_with(tolower) %>%
    mutate(
      county = str_to_lower(str_remove_all(county, " county| parish| borough")),
      state = str_to_lower(state)
    ) %>%
    mutate(year = year)
}

clean_2020 <- prep_df(results_2020_df, 2020)
clean_2024 <- prep_df(results_2024_df, 2024)

# Join on standardized county and state
combined_results <- full_join(clean_2020, clean_2024, by = c("state", "county"), suffix = c("_2020", "_2024"))

# Preview
head(combined_results)

county_shapes_clean <- county_shapes %>%
  select(STATEFP, COUNTYFP, NAME, geometry) %>%
  mutate(
    fips = paste0(STATEFP, COUNTYFP),
    county = tolower(NAME)
  )

# Convert county names to lowercase for better join matching
combined_results <- combined_results %>%
  mutate(county = tolower(county), state = tolower(state))

joined_data <- county_shapes_clean %>%
  mutate(state = tolower(state.name[as.integer(STATEFP)])) %>%
  left_join(combined_results, by = c("county", "state"))

head(joined_data)
```

## Questions 

**1. Which county or counties cast the most votes for Trump (in absolute terms) in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Ensure column name for Trump's 2024 votes is present
# Find any column containing "trump" and "2024"
trump_2024_col <- names(joined_data)[str_detect(names(joined_data), "trump.*2024")][1]

# Safety check in case the column doesn't exist
if (is.null(trump_2024_col) || is.na(trump_2024_col)) {
  stop("Trump 2024 vote column not found. Please check the joined data.")
}

# Use rlang to refer to the dynamic column name
library(rlang)

# Find the county or counties with the highest Trump 2024 vote count
top_trump_2024 <- joined_data %>%
  filter(!is.na(.data[[trump_2024_col]])) %>%
  arrange(desc(.data[[trump_2024_col]])) %>%
  filter(.data[[trump_2024_col]] == max(.data[[trump_2024_col]], na.rm = TRUE)) %>%
  select(state, county, trump_votes_2024 = all_of(trump_2024_col))

kable(top_trump_2024, caption = "County or Counties with the Most Trump Votes in 2024")
```

**2. Which county or counties cast the most votes for Biden (as a fraction of total votes cast) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

clean_2020 |>
  mutate(biden_share = joe_biden_democratic / total_votes) |>
  arrange(desc(biden_share)) |>
  select(state, county, joe_biden_democratic, total_votes, biden_share) |>
  slice_max(biden_share, n = 10)

library(ggplot2)
library(dplyr)

top_biden_counties <- clean_2020 |>
  mutate(biden_share = joe_biden_democratic / total_votes) |>
  arrange(desc(biden_share)) |>
  slice_max(biden_share, n = 10) |>
  select(state, county, joe_biden_democratic, total_votes, biden_share)

# Plotting
ggplot(top_biden_counties, aes(x = reorder(paste(county, state, sep = ", "), biden_share), 
                               y = biden_share)) +
  geom_col(fill = "blue") +
  coord_flip() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    title = "Top 10 Most Pro-Biden Counties (2020 Election)",
    x = "County, State",
    y = "Biden Vote Share (%)"
  ) +
  theme_minimal()
```

**3. Which county or counties had the largest shift towards Trump (in absolute terms) in 2024?**

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

clean_2024 |>
  mutate(
    donald_trump_republican = as.numeric(gsub(",", "", donald_trump_republican)),
    donald_trump_republican_2 = as.numeric(gsub("%", "", donald_trump_republican_2)),
    trump_shift = donald_trump_republican_2 - donald_trump_republican
  ) |>
  filter(trump_shift == max(trump_shift, na.rm = TRUE)) |>
  select(state, county, donald_trump_republican, donald_trump_republican_2, trump_shift)
```

**4. Which state had the largest shift towards Harris (or smallest shift towards Trump) in 2024? (Note that the total votes for a state can be obtained by summing all counties in that state.)**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Calculate Harris' shift and total votes for each county in 2024
clean_2024 <- clean_2024 |>
  mutate(
    trump_2024 = as.numeric(gsub(",", "", donald_trump_republican)),
    harris_2024 = as.numeric(gsub(",", "", kamala_harris_democratic)),
    total_2024 = harris_2024 + trump_2024,
    harris_pct_2024 = 100 * harris_2024 / total_2024,
    trump_pct_2024 = 100 * trump_2024 / total_2024,
    harris_shift = harris_pct_2024  # Focus on Harris's percentage in 2024
  )

# Summarize the vote shifts by state (sum total votes and weighted shift for 2024)
state_shifts <- clean_2024 |>
  group_by(state) |>
  summarise(
    total_votes_2024 = sum(total_2024, na.rm = TRUE),  # Sum of all votes in each state
    weighted_shift = sum(harris_shift * total_2024, na.rm = TRUE) / total_votes_2024  # Weighted average shift
  ) |>
  arrange(desc(weighted_shift))  # Sort by largest shift towards Harris

# Select top states (e.g., top 5 states with largest shift)
top_states <- state_shifts |> 
  slice_head(n = 5)  # Top 5 states with largest shift towards Harris

# Show the clean table with only relevant data (top states)
library(knitr)

kable(top_states, digits = 2, col.names = c("State", "Total 2024 Votes", "Weighted Shift Toward Harris"))

# Load ggplot2 for visualization
library(ggplot2)

# Create a bar plot to visualize the shift towards Harris in 2024 for the top states
ggplot(top_states, aes(x = reorder(state, weighted_shift), y = weighted_shift)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +  # Flip the coordinates for better readability
  labs(
    title = "Top States with Largest Shift Toward Harris in 2024",
    x = "State",
    y = "Weighted Shift Toward Harris (%)"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 12),
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )
```

**5. What is the largest county, by area, in this data set?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

county_shapefile <- st_read("C:/Users/benne/OneDrive/Documents/STA9750-2025-SPRING/data/mp04/county_shapes")

# Calculate area for each county
county_shapefile <- county_shapefile %>%
  mutate(area = st_area(geometry))  # This creates a new column 'area' with the area of each county

# Find the largest county by area
largest_county <- county_shapefile %>%
  arrange(desc(area)) %>%
  slice(1)  # Select the first row, which will have the largest area

# Print the largest county and its area
print(largest_county)


# Calculate area for each county
county_shapefile <- county_shapefile %>%
  mutate(area = st_area(geometry))  # Adds area column

# Find the largest county by area
largest_county <- county_shapefile %>%
  arrange(desc(area)) %>%
  slice(1)  # Selects the largest county

# Create the plot
ggplot() +
  # Plot all counties
  geom_sf(data = county_shapefile, fill = "lightblue", color = "gray", size = 0.2) +
  # Highlight the largest county
  geom_sf(data = largest_county, fill = "red", color = "black", size = 1.2) +
  # Add title and theme
  ggtitle("Largest County by Area") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank()
  )
```

**6. Which county has the highest voter density (voters per unit of area) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Get the county with the highest voter density
highest_density_county <- merged_data |>
  arrange(desc(voter_density)) |>
  slice(1) |>
  select(NAME)

# Print the county with the highest voter density
print(highest_density_county)
```

**7. Which county had the largest increase in voter turnout in 2024?**