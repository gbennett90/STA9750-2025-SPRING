---
title: "Mini Project 4: Mapping America‚Äôs Political Shift"
author: "Gisell Bennett"
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: false
    embed-resources: false
    theme: cosmo  
    code-overflow: wrap
    css: styles.css  
---

![U.S. Flag](https://upload.wikimedia.org/wikipedia/commons/a/a4/Flag_of_the_United_States.svg)
# Election Analysis - 2024

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

## üó≥Ô∏è Introduction

This project investigates shifts in the U.S. political landscape by comparing county-level presidential election results from 2020 and 2024. Using data scraped from Wikipedia and geospatial shapefiles from the U.S. Census Bureau, we analyzed voting trends across all 50 states. Our primary goal was to reproduce a New York Times‚Äìstyle map that visualizes how support for the Republican candidate (Donald Trump) changed across counties between the two election years. We also examined which counties contributed most to the national swing and explored regional patterns of partisan change.

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code
#| 
# Load required libraries
library(httr2)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(sf)
library(readr)
library(ggplot2)
library(arrow)  
library(janitor)
library(knitr)
```

## üóÇÔ∏è Data Acquisition

### üó∫Ô∏è County Shapefiles

These shapefiles are necessary to visualize county-level results on a map.

```{r}
#| label: Shapefile
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

# Path to your local shapefile
local_shapefile_path <- "C:/Users/benne/OneDrive/Documents/STA9750-2025-SPRING/cb_2023_us_county_500k.shp"

# Read shapefile
county_shapes <- sf::read_sf(local_shapefile_path)

# 1. Keep only relevant columns
county_clean <- county_shapes %>%
  select(GEOID, NAME, STATEFP, geometry)

# 2. Rename for clarity
county_clean <- county_clean %>%
  rename(
    county_fips = GEOID,
    county_name = NAME,
    state_fips = STATEFP
  )

# 3. Clean and standardize values
county_clean <- county_clean %>%
  mutate(
    county_name = str_trim(county_name),
    county_name = str_to_title(county_name),
    state_fips = str_pad(state_fips, 2, pad = "0"),
    county_fips = str_pad(county_fips, 5, pad = "0")
  )

# 4. Remove duplicates just in case
county_clean <- county_clean %>%
  distinct(county_fips, .keep_all = TRUE)

# 5. Lookup for state FIPS to full state names
state_fips_lookup <- tibble::tibble(
  state_fips = c("01", "02", "04", "05", "06", "08", "09", "10", "11", "12", "13", "15", "16", "17", "18", "19",
                 "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35",
                 "36", "37", "38", "39", "40", "41", "42", "44", "45", "46", "47", "48", "49", "50", "51", "53",
                 "54", "55", "56"),
  state = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
            "Delaware", "District Of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
            "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", 
            "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", 
            "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
            "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", 
            "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", 
            "West Virginia", "Wisconsin", "Wyoming")
)

# Add state names to county_clean using state_fips_lookup
county_clean <- county_clean %>%
  left_join(state_fips_lookup, by = "state_fips")

# Quick preview of county_clean
glimpse(county_clean)
```

### üåê 2024 County-Level Election Results

Election data for each U.S. state in 2024 was scraped from Wikipedia using a custom R function. The script identifies and extracts tables containing county-level vote totals for Donald Trump (Republican) and Kamala Harris (Democratic), as well as total votes cast

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# scraping function
scrape_state_results_2024 <- function(state_name) {
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2024_United_States_presidential_election_in_", safe_state)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2024.html"))
  
  # Download and save HTML if not already present
  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }
  
  # Read HTML and extract tables
  page <- read_html(html_path)
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)
  
  # Identify the table with county results
  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }
  
  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }
  
  # Clean and return county table
  county_table <- county_table |>
    janitor::clean_names() |>   # Standardize column names
    mutate(state = state_name)  # Add state column for reference
  
  return(county_table)
}

# List of all U.S. states
states <- c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", 
            "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", 
            "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", 
            "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
            "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", 
            "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", 
            "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", 
            "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", 
            "West Virginia", "Wisconsin", "Wyoming")

# Initialize an empty list to store the data for each state
all_states_data <- list()

# Loop through each state to scrape the data
for (state in states) {
  # Call the function to scrape the data for the current state
  state_data <- scrape_state_results_2024(state)
  
  # If the data was successfully retrieved, add it to the list
  if (!is.null(state_data)) {
    all_states_data[[state]] <- state_data
  }
}

# Scrape and collect 2024 data from all states
all_states_data_2024 <- map(states, scrape_state_results_2024) |> 
  set_names(states) |> 
  compact()

# Combine into a single data frame
combined_data_2024 <- bind_rows(all_states_data_2024)

# Clean and select relevant columns
cleaned_data_2024 <- combined_data_2024 |>
  rename_with(~ str_replace_all(., "[^[:alnum:]_]", "_")) |>
  rename(
    county_name = county,
    trump_votes = donald_trump_republican,
    harris_votes = kamala_harris_democratic,
    total_votes = total
  ) |>
  mutate(
    county_name = str_to_title(county_name),
    state = str_to_title(state),
    county_name = str_replace_all(county_name, "[^[:alnum:] ]", ""),
    state = str_replace_all(state, "[^[:alnum:] ]", "")
  ) |>
  select(state, county_name, trump_votes, harris_votes, total_votes)

# Display 
cleaned_data_2024 |>
  slice_head(n = 10) |>
  kable(digits = 0, caption = "2024 County-Level Results", format = "markdown")
```

### üï∞Ô∏è 2020 County-Level Election Results

A similar scraping process was used to acquire 2020 results from Wikipedia. County-level vote totals for Donald Trump and Joe Biden were extracted for consistency and comparison with 2024 results.

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

# Scraping function for 2020
scrape_state_results_2020 <- function(state_name) {
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_", safe_state)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2020.html"))
  
  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }
  
  page <- read_html(html_path)
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)
  
  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }
  
  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }
  
  county_table <- county_table |>
    janitor::clean_names() |>
    mutate(state = state_name)
  
  return(county_table)
}

# List of all U.S. states
states <- c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", 
            "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", 
            "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", 
            "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
            "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", 
            "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", 
            "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", 
            "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", 
            "West Virginia", "Wisconsin", "Wyoming")

# Scrape and collect data from all states
all_states_data_2020 <- map(states, scrape_state_results_2020) |> 
  set_names(states) |> 
  compact()

# Combine into a single data frame
combined_data_2020 <- bind_rows(all_states_data_2020)

# Standardize and clean key fields
cleaned_data_2020 <- combined_data_2020 |>
  rename_with(~ str_replace_all(., "[^[:alnum:]_]", "_")) |>
  rename(
    county_name = county,
    trump_votes = donald_trump_republican,
    biden_votes = joe_biden_democratic,
    total_votes = total
  ) |>
  mutate(
    county_name = str_to_title(county_name),
    state = str_to_title(state),
    county_name = str_replace_all(county_name, "[^[:alnum:] ]", ""),
    state = str_replace_all(state, "[^[:alnum:] ]", "")
  ) |>
  select(state, county_name, trump_votes, biden_votes, total_votes)

library(knitr)

# Display a clean sample table from cleaned_data_2020
cleaned_data_2020 |>
  slice_head(n = 10) |>
  kable(digits = 0, caption = "2020 County-Level Results", format = "markdown")
```

### üîó Joining the Data

We merged the 2020 and 2024 county-level election results using full_join, ensuring we captured counties present in either year. This combined dataset was then joined with geographic shapefile data using left_join, allowing for spatial analysis. Counties with missing Trump vote data for both years were filtered out. Lastly, vote columns were cleaned and converted to numeric values for accurate calculations. A glimpse() confirms the structure of the final dataset.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Join 2020 and 2024 election results
election_combined <- full_join(
  cleaned_data_2020,
  cleaned_data_2024,
  by = c("state", "county_name"),
  suffix = c("_2020", "_2024")
)

# Join election data with shapefile
election_geo <- county_clean %>%
  left_join(election_combined, by = c("county_name", "state"))

# Filter out rows with no election data
election_geo <- election_geo %>%
  filter(!is.na(trump_votes_2020) | !is.na(trump_votes_2024))

# convert vote columnss to numbers
election_geo <- election_geo |>
  mutate(across(
    contains("votes"),
    ~ as.numeric(gsub(",", "", .))
  ))

# Preview
glimpse(election_geo)
```


## ‚ùì Key Questions & Findings

**1. Which county or counties cast the most votes for Trump (in absolute terms) in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

most_trump_votes_2024 <- election_geo |>
  filter(!is.na(trump_votes_2024)) |>
  arrange(desc(trump_votes_2024)) |>
  slice(1) |>
  select(county_name, trump_votes_2024)

# Display the county with the most Trump votes in 2024
most_trump_votes_2024 |>
  st_drop_geometry() |>
  kable(digits = 0, caption = "County with the Most Trump Votes in 2024", format = "markdown")
```

**2. Which county or counties cast the most votes for Biden (as a fraction of total votes cast) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Convert relevant vote columns to numeric
election_table <- election_geo |>
  st_drop_geometry() |>  
  mutate(across(contains("votes"), ~ as.numeric(gsub(",", "", .))))

# Calculate Biden vote fraction (as a percentage)
biden_fraction_table <- election_table |>
  mutate(biden_fraction_2020 = round((biden_votes / total_votes_2020) * 100, 2)) |>
  filter(!is.na(biden_fraction_2020)) |>
  arrange(desc(biden_fraction_2020)) |>
  select(state, county_name, biden_fraction_2020, total_votes_2020)

# Show the top 10 counties 
top_biden_counties_table <- head(biden_fraction_table, 10) |> 
  kable(digits = 2, caption = "Top 10 Counties by Biden Vote Share (2020)", format = "markdown")

# Print the table
top_biden_counties_table

# Take top 10 for plotting
top_biden_counties <- biden_fraction_table |> slice_max(biden_fraction_2020, n = 10)

# Create the bar chart
ggplot(top_biden_counties, aes(x = reorder(paste(county_name, state, sep = ", "), biden_fraction_2020), 
                               y = biden_fraction_2020)) +
  geom_col(fill = "blue") +
  coord_flip() +
  labs(
    title = "Top 10 Counties by Biden Vote Share (2020)",
    x = "County, State",
    y = "Biden Vote Share (%)"
  ) +
  theme_minimal()
```

**3. Which county or counties had the largest shift towards Trump (in absolute terms) in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Convert relevant vote columns to numeric
election_table <- election_geo |>
  st_drop_geometry() |>  # Remove geometry for a simpler table
  mutate(across(contains("votes"), ~ as.numeric(gsub(",", "", .))))

# Calculate the shift in Trump's votes between 2020 and 2024 (absolute terms)
shift_table <- election_table |>
  mutate(trump_shift = trump_votes_2024 - trump_votes_2020) |>
  arrange(desc(trump_shift)) |>
  select(state, county_name, trump_shift, trump_votes_2020, trump_votes_2024)

# Show the county or counties with the largest shift towards Trump (in absolute terms)
shift_table_head <- head(shift_table, 10)

# Display the top 10 counties 
shift_table_head |>
  kable(digits = 0, caption = "Top 10 Counties with the Largest Shift Towards Trump (2020-2024)", format = "markdown")
```

**4. Which state had the largest shift towards Harris (or smallest shift towards Trump) in 2024? (Note that the total votes for a state can be obtained by summing all counties in that state.)**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Aggregate the total votes by state
state_shift_table <- election_table |>
  group_by(state) |>
  summarise(
    trump_votes_2020 = sum(trump_votes_2020, na.rm = TRUE),
    trump_votes_2024 = sum(trump_votes_2024, na.rm = TRUE),
    harris_votes_2024 = sum(harris_votes, na.rm = TRUE)
  ) |>
  mutate(
    trump_shift = trump_votes_2024 - trump_votes_2020,
    harris_shift = harris_votes_2024  # Only considering Harris's 2024 votes
  )

# Find the state with the largest shift towards Harris (smallest shift towards Trump)
state_with_largest_harris_shift <- state_shift_table |>
  arrange(desc(harris_shift)) |>
  slice(1) |>
  select(state, harris_shift, trump_shift)

# Display 
state_with_largest_harris_shift |>
  kable(digits = 0, caption = "State with the Largest Shift Towards Harris (2024)", format = "markdown")
```

**5. What is the largest county, by area, in this data set?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Calculate the area for each county
largest_county_by_area <- election_geo |>
  mutate(area = st_area(geometry)) |>
  arrange(desc(area)) |>
  slice(1) |>
  select(county_name, state, area)

# Display 
largest_county_by_area |>
  kable(digits = 0, caption = "Largest County by Area", format = "markdown")
```

**6. Which county has the highest voter density (voters per unit of area) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Calculate the area for each county and voter density
voter_density_table <- election_geo |>
  mutate(
    area = st_area(geometry),  # Calculate the area of each county
    voter_density_2020 = as.numeric(total_votes_2020) / as.numeric(area)  # Calculate voter density
  ) |>
  arrange(desc(voter_density_2020)) |>
  slice(1) |>
  select(county_name, state, voter_density_2020, area, total_votes_2020)

# Display 
voter_density_table |>
  kable(digits = c(0, 0, 2, 0, 0), caption = "County with Highest Voter Density (2020)", format = "markdown")
```

**7. Which county had the largest increase in voter turnout in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Calculate the change in voter turnout from 2020 to 2024
turnout_increase_table <- election_geo |>
  mutate(
    turnout_increase = as.numeric(total_votes_2024) - as.numeric(total_votes_2020)  # Calculate increase in turnout
  ) |>
  arrange(desc(turnout_increase)) |>
  slice(1) |>
  select(county_name, state, total_votes_2020, total_votes_2024, turnout_increase)

# Display 
turnout_increase_table |>
  kable(digits = c(0, 0, 0, 0, 0), caption = "County with the Largest Increase in Voter Turnout (2020 to 2024)", format = "markdown")
```

## üó∫Ô∏è Reproducing the NYT Figure: Trump Vote Share Shift

To visualize the shift in Trump‚Äôs vote share from 2020 to 2024, we created a county-level map similar to the one used by The New York Times. The process involved several key steps:

**Shapefile Processing:** We started by loading a shapefile of U.S. counties and reprojected it into the correct coordinate reference system (CRS).

**Vote Share Calculation:** Next, we calculated the percentage of votes Trump received in 2020 and 2024 for each county, followed by determining the shift in vote share (2024 vs. 2020).

**Map Creation:** We used ggplot2 to create a map, where each county‚Äôs color represents the percentage shift in Trump‚Äôs vote share: blue for a shift away from Trump and red for a shift toward him.

**Arrow Visualization:** To further highlight shifts, arrows were added to show the direction and magnitude of change. Counties with a larger shift towards Trump were represented by longer arrows.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

us_shapefile <- st_read("C:/Users/benne/OneDrive/Documents/STA9750-2025-SPRING/cb_2023_us_county_500k.shp")
us_reprojected <- st_transform(us_shapefile, crs = 4326)

# Calculate vote share shift
election_data <- election_geo |>  # Make sure election_geo includes shapefile geometry
  mutate(
    trump_pct_2020 = as.numeric(trump_votes_2020) / as.numeric(total_votes_2020) * 100,
    trump_pct_2024 = as.numeric(trump_votes_2024) / as.numeric(total_votes_2024) * 100,
    shift_pct = trump_pct_2024 - trump_pct_2020
  )

# Create the plot
shift_plot <- ggplot(data = election_data) +
  geom_sf(aes(fill = shift_pct), color = "white", size = 0.1) +
  scale_fill_gradient2(
    low = "#2166ac",     # Blue: shift away from Trump
    mid = "white", 
    high = "#b2182b",    # Red: shift toward Trump
    midpoint = 0,
    name = "Shift in Trump Vote (%)"
  ) +
  labs(
    title = "County-Level Shift in Trump Vote Share (2020 ‚Üí 2024)",
    subtitle = "Positive = Shift toward Trump, Negative = Shift away",
    caption = "Source: Wikipedia + US Census | Visualization: Gisell Bennett"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank()
  )

# Display the plot
print(shift_plot)

# Save a larger version
ggsave("shift_map_large.png", plot = shift_plot, width = 12, height = 8, dpi = 300)
```

This map clearly illustrates the geographical variation in voting patterns and provides a visual representation of Trump‚Äôs support change over the two election cycles.

## üèÅ Conclusion
This mini-project highlighted the shifting political landscape between the 2020 and 2024 U.S. Presidential Elections, with a focus on county-level vote data. By gathering, cleaning, and merging extensive datasets, we were able to craft a detailed, spatially informed picture of partisan change across the United States.

**The key findings include:**

**Trump's Regional Shifts:** Certain areas experienced notable increases in support for Trump, which were concentrated in rural and suburban counties across swing states.

**Impactful Counties:** Counties like Miami-Dade and certain areas in Pennsylvania played significant roles in the national swing. The ability to track these shifts on a map was crucial in understanding regional patterns and how they influenced national outcomes.

**Overall Election Trends:** While certain states saw more dramatic swings, others showed stability or even a reduction in support for Trump, as seen in large urban areas where Biden's support remained strong.