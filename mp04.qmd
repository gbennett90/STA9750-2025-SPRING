---
title: "Mini Project 4"
output: html_document
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r setup, include=FALSE}
library(sf)
library(httr2)
library(rvest)
library(stringr)
library(janitor)
library(dplyr)
library(knitr)
library(purrr)
library(ggplot2)
```

## ðŸ§© US County Shapes

I focused on acquiring data for the ***2020 U.S. Presidential Election*** by scraping county-level election results from Wikipedia. Using the rvest and httr2 libraries in R, I collected the relevant election data for each state. The data was cleaned by removing unnecessary columns, converting character values to numeric, and renaming ambiguous columns. This ensured that the dataset contained only relevant columns, such as the total votes for Joe Biden and Donald Trump, while also addressing inconsistencies in the column names. The cleaned dataset laid the foundation for the state-level analysis conducted in the subsequent tasks.

```{r}
#| label: Task 1
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

# Directory setup
dir.create("data/mp04", recursive = TRUE, showWarnings = FALSE)

# URL for detailed county shapefiles
url <- "https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_county_500k.zip"
zip_path <- "data/mp04/county_shapefiles.zip"
shapefile_dir <- "data/mp04/county_shapes"

# Download only if not present
if (!file.exists(zip_path)) {
  download.file(url, destfile = zip_path, mode = "wb")
}

# Unzip shapefile
if (!dir.exists(shapefile_dir)) {
  unzip(zip_path, exdir = shapefile_dir)
}

# Read shapefile
county_shapes <- st_read(shapefile_dir)

# Preview (first 6 rows, selected columns)
county_shapes_clean <- county_shapes %>%
  select(STATEFP, COUNTYFP, NAME, geometry) %>%
  head(6)

kable(county_shapes_clean)
```

## ðŸ§© 2024 US Presidential Election Results

Using the cleaning function developed earlier, I extracted and processed county-level election results for each state. This involved ensuring that the necessary vote columns were available and that the data was correctly formatted for analysis. After cleaning the data, I combined the results into a single dataset, making it easier to compute state-level summaries. This step was essential for preparing the dataset for deeper analysis, including vote totals and candidate comparisons across different states.

```{r}
#| label: Task 2
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code

scrape_state_results_2024 <- function(state_name) {
  # Step 1: Generate the Wikipedia URL
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2024_United_States_presidential_election_in_", safe_state)
  
  # Step 2: Create a local path to save the raw HTML
  dir.create("data/mp04/html", showWarnings = FALSE, recursive = TRUE)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2024.html"))
  
  # Step 3: Download HTML if not already saved
  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }
  
  # Step 4: Read the HTML
  page <- read_html(html_path)
  
  # Step 5: Extract all tables
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)
  
  # Step 6: Find the table with a "County" column
  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }
  
  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }
  
  # Step 7: Clean up the table
  county_table <- county_table |>
    janitor::clean_names() |>   # optional, makes column names consistent
    mutate(state = state_name)
  
  return(county_table)
}

# Try New York
ny_results <- scrape_state_results_2024("New York")
head(ny_results)
```

## âœ… 2020 US Presidential Election Results

The function extracts relevant vote counts for Joe Biden and Donald Trump, along with total votes, and standardizes column names across varying table formats. After combining the cleaned datasets, I computed state-level summaries, including total votes for each candidate and their respective vote shares. The summary table and accompanying bar chart reveal differences in voter turnout and candidate support across states, with ***California*** and ***Florida*** contributing the highest total vote counts in the sample.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

library(xml2)
library(purrr)
library(ggplot2)

# Define scraping + cleaning function
scrape_clean_state_results_2020 <- function(state_name, show_table = FALSE) {
  safe_state <- gsub(" ", "_", state_name)
  url <- paste0("https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_", safe_state)
  html_path <- file.path("data/mp04/html", paste0(safe_state, "_2020.html"))
  dir.create("data/mp04/html", recursive = TRUE, showWarnings = FALSE)

  if (!file.exists(html_path)) {
    resp <- request(url) |> req_perform()
    writeBin(resp_body_raw(resp), html_path)
  }

  page <- read_html(html_path)
  tables <- page |> html_elements("table") |> html_table(fill = TRUE)

  county_table <- NULL
  for (tbl in tables) {
    if (any(str_detect(names(tbl), regex("County|Parish|Borough", ignore_case = TRUE)))) {
      county_table <- tbl
      break
    }
  }

  if (is.null(county_table)) {
    warning(paste("No county-level table found for", state_name))
    return(NULL)
  }

  county_table <- county_table |> clean_names()
  names(county_table) <- tolower(names(county_table))

  if (!any(str_detect(names(county_table), "biden")) | !any(str_detect(names(county_table), "trump"))) {
    warning(paste("Expected vote columns not found in", state_name))
    return(NULL)
  }

  cleaned <- county_table |> 
    select(matches("county|trump|biden|total|votes")) |> 
    mutate(state = state_name) |> 
    mutate(across(where(is.character), ~ gsub(",", "", .))) |> 
    mutate(across(matches("trump|biden|total|votes"), ~ suppressWarnings(as.numeric(.))))

  if (!"total_votes" %in% names(cleaned)) {
    tv_col <- names(cleaned)[str_detect(names(cleaned), "total|votes")][1]
    if (!is.na(tv_col)) {
      cleaned <- cleaned |> rename(total_votes = all_of(tv_col))
    }
  }

  if (show_table) {
    return(kable(head(cleaned, 10), caption = paste("2020 Results for", state_name)))
  } else {
    return(cleaned)
  }
}

# Select 50 states for full data
states <- state.name  # All U.S. states from the built-in state.name dataset

# Scrape and clean data
results_2020 <- map(states, ~ scrape_clean_state_results_2020(.x))
results_2020_df <- bind_rows(results_2020[!sapply(results_2020, is.null)])

# Summarize vote totals by state
state_summary_2020 <- results_2020_df |>
  group_by(state) |>
  summarise(
    total_biden = sum(joe_biden_democratic, na.rm = TRUE),
    total_trump = sum(donald_trump_republican, na.rm = TRUE),
    total_votes = sum(total_votes, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    biden_pct = round(100 * total_biden / total_votes, 1),
    trump_pct = round(100 * total_trump / total_votes, 1)
  ) |>
  arrange(desc(total_votes))

# View summary
kable(
  head(state_summary_2020, 10),
  caption = "Top States by Total Votes in the 2020 Presidential Election"
)
```

## Combining 

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Show Code
#| include: false

library(dplyr)
library(stringr)

# Scrape all 2024 results
results_2024 <- map(state.name, ~ scrape_state_results_2024(.x))
results_2024_df <- bind_rows(results_2024[!sapply(results_2024, is.null)])

# Prep both datasets for joining
prep_df <- function(df, year) {
  df %>%
    rename_with(tolower) %>%
    mutate(
      county = str_to_lower(str_remove_all(county, " county| parish| borough")),
      state = str_to_lower(state)
    ) %>%
    mutate(year = year)
}

clean_2020 <- prep_df(results_2020_df, 2020)
clean_2024 <- prep_df(results_2024_df, 2024)

# Join on standardized county and state
combined_results <- full_join(clean_2020, clean_2024, by = c("state", "county"), suffix = c("_2020", "_2024"))

# Preview
head(combined_results)

county_shapes_clean <- county_shapes %>%
  select(STATEFP, COUNTYFP, NAME, geometry) %>%
  mutate(
    fips = paste0(STATEFP, COUNTYFP),
    county = tolower(NAME)
  )

# Convert county names to lowercase for better join matching
combined_results <- combined_results %>%
  mutate(county = tolower(county), state = tolower(state))

joined_data <- county_shapes_clean %>%
  mutate(state = tolower(state.name[as.integer(STATEFP)])) %>%
  left_join(combined_results, by = c("county", "state"))

head(joined_data)
```

## Questions 

**1. Which county or counties cast the most votes for Trump (in absolute terms) in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

# Ensure column name for Trump's 2024 votes is present
# Find any column containing "trump" and "2024"
trump_2024_col <- names(joined_data)[str_detect(names(joined_data), "trump.*2024")][1]

# Safety check in case the column doesn't exist
if (is.null(trump_2024_col) || is.na(trump_2024_col)) {
  stop("Trump 2024 vote column not found. Please check the joined data.")
}

# Use rlang to refer to the dynamic column name
library(rlang)

# Find the county or counties with the highest Trump 2024 vote count
top_trump_2024 <- joined_data %>%
  filter(!is.na(.data[[trump_2024_col]])) %>%
  arrange(desc(.data[[trump_2024_col]])) %>%
  filter(.data[[trump_2024_col]] == max(.data[[trump_2024_col]], na.rm = TRUE)) %>%
  select(state, county, trump_votes_2024 = all_of(trump_2024_col))

kable(top_trump_2024, caption = "County or Counties with the Most Trump Votes in 2024")
```

**2. Which county or counties cast the most votes for Biden (as a fraction of total votes cast) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false

```

**3. Which county or counties had the largest shift towards Trump (in absolute terms) in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false


```

**4. Which state had the largest shift towards Harris (or smallest shift towards Trump) in 2024? (Note that the total votes for a state can be obtained by summing all counties in that state.)**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false


```

**5. What is the largest county, by area, in this data set?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false


```

**6. Which county has the highest voter density (voters per unit of area) in 2020?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false


```

**7. Which county had the largest increase in voter turnout in 2024?**
```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false


```
